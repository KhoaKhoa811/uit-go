syntax = "proto3";

package driver;

option go_package = "./pkg/pb";

message CreateDriverRequest {
    string name = 1;
    string vehicle = 2;
    string email = 3;
    string password = 4;
    string phone = 5;
    string license_number = 6;
}

message CreateDriverResponse {
   int64 status = 1;
   string error = 2;
   int64 id = 3;
   string name = 4;
   string vehicle = 5;
   string email = 6;
}

message UpdateDriverLocationRequest {
   int64 id = 1;
   double latitude = 2;
   double longitude = 3;
}

message UpdateDriverLocationResponse {
   string status = 1;
   string message = 2;
}

message GetAvailableDriversNearUserRequest {
   double latitude = 1;
   double longitude = 2;
   int32 max_driver = 3;
   int32 radius = 4;
}

message GetAvailableDriversNearUserResponse {
   string status = 1;
   repeated int64 drivers = 2;
}

message SendNotificationToDriverRequest {
   int64 driver_id = 1;
   double pickup_latitude = 2;
   double pickup_longitude = 3;
   double dropoff_latitude = 4;
   double dropoff_longitude = 5;
   double distance =  6;
   int64 trip_fare = 7;
}

message SendNotificationToDriverResponse {
   string status = 1;
   string message = 2;
}

message ResponseToTripServiceRequest {
   int64 trip_id = 1;
   int64 driver_id = 2;
   bool accept = 3;
}

message ResponseToTripServiceResponse {
   string status = 1;
   string message = 2;
}

service DriverService {
   rpc CreateDriver(CreateDriverRequest) returns (CreateDriverResponse);
   rpc UpdateDriverLocation(UpdateDriverLocationRequest) returns (UpdateDriverLocationResponse);
   rpc GetAvailableDriversNearUser(GetAvailableDriversNearUserRequest) returns (GetAvailableDriversNearUserResponse);
   rpc SendNotificationToDriver(SendNotificationToDriverRequest) returns (SendNotificationToDriverResponse);
   rpc ResponseToTripService(ResponseToTripServiceRequest) returns (ResponseToTripServiceResponse);
}